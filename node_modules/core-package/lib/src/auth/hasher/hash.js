"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkPassword = exports.hashPassword = void 0;
const tsscmp_1 = __importDefault(require("tsscmp"));
const phpFunctions = __importStar(require("./phpFunctions"));
const itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
const iterationCountLog2 = 8;
function encode64(input, count) {
    let output = '';
    let i = 0;
    do {
        let value = phpFunctions.ord(input[i++]);
        output += itoa64[value & 0x3f];
        if (i < count)
            value |= phpFunctions.ord(input[i]) << 8;
        output += itoa64[(value >> 6) & 0x3f];
        if (i++ >= count)
            break;
        if (i < count)
            value |= phpFunctions.ord(input[i]) << 16;
        output += itoa64[(value >> 12) & 0x3f];
        if (i++ >= count)
            break;
        output += itoa64[(value >> 18) & 0x3f];
    } while (i < count);
    return output;
}
function cryptPrivate(password, setting) {
    let output = '*0';
    if (phpFunctions.substr(setting, 0, 2) == output)
        output = '*1';
    if (phpFunctions.substr(setting, 0, 3) != '$P$')
        return output;
    const countLog2 = phpFunctions.strpos(itoa64, setting[3]);
    if (countLog2 < 7 || countLog2 > 30)
        return output;
    let count = 1 << countLog2;
    const salt = phpFunctions.substr(setting, 4, 8);
    if (phpFunctions.strlen(salt) != 8)
        return output;
    let hash = phpFunctions.md5(`${salt}${password}`, true);
    do {
        hash = phpFunctions.md5(`${hash}${password}`, true);
    } while (--count);
    output = phpFunctions.substr(setting, 0, 12);
    output += encode64(hash, 16);
    return output;
}
function gensaltPrivate(input) {
    const hashHeader = '$P$';
    const itoa64Char = itoa64[Math.min(iterationCountLog2 + 5, 30)];
    const encodedInput = encode64(input, 6);
    return `${hashHeader}${itoa64Char}${encodedInput}`;
}
function hashPassword(password) {
    const salt = gensaltPrivate(phpFunctions.sixCharRandom());
    const hash = cryptPrivate(password, salt);
    return hash;
}
exports.hashPassword = hashPassword;
function checkPassword(password, storedHash) {
    const hash = cryptPrivate(password, storedHash);
    return tsscmp_1.default(hash, storedHash);
}
exports.checkPassword = checkPassword;
//# sourceMappingURL=hash.js.map