"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildValidationMiddleware = void 0;
const joi_1 = __importDefault(require("@hapi/joi"));
const httpStatuses_1 = require("../httpStatuses");
const DEFAULT_ERROR_MESSAGE = 'Bad Request';
const DEFAULT_ERROR_CODE = 'bad-request';
const JOI_OPTIONS = { abortEarly: false };
const isFunction = (subject) => typeof subject === 'function';
function buildValidator(schema) {
    return joi_1.default.object(Object.assign({ headers: joi_1.default.any(), params: joi_1.default.any(), query: joi_1.default.any(), cookies: joi_1.default.any(), body: joi_1.default.any() }, schema))
        .required()
        .min(1);
}
const buildErrorMessage = (builderArguments, options) => (options === null || options === void 0 ? void 0 : options.message) ? isFunction(options.message)
    ? options.message(builderArguments)
    : options.message
    : DEFAULT_ERROR_MESSAGE;
const buildErrorResponse = (error, builderArguments, options) => ({
    message: buildErrorMessage(builderArguments, options),
    code: (options === null || options === void 0 ? void 0 : options.code) || DEFAULT_ERROR_CODE,
    statusCode: httpStatuses_1.HttpStatuses.BAD_REQUEST,
    context: {
        validationErrors: error.details.map(detail => {
            var _a;
            return ({
                name: (_a = detail.context) === null || _a === void 0 ? void 0 : _a.key,
                message: detail.message,
                path: detail.path,
                type: detail.type,
            });
        }),
    },
});
function validate(validator, data) {
    const result = validator.validate(data, JOI_OPTIONS);
    if (result.error) {
        throw result.error;
    }
    return result.value;
}
function buildValidationMiddleware(schema, options) {
    return (request, response, next) => {
        const { headers, params, query, body, cookies } = request;
        const builderArguments = { translate: request.translate };
        try {
            const validator = buildValidator(isFunction(schema) ? schema(builderArguments) : schema);
            const validationResult = validate(validator, {
                headers,
                params,
                query,
                body,
                cookies,
            });
            request.headers = validationResult.headers;
            request.params = validationResult.params;
            request.query = validationResult.query;
            request.cookies = validationResult.cookies;
            request.body = validationResult.body;
            return next();
        }
        catch (error) {
            if (error.isJoi) {
                return response
                    .status(httpStatuses_1.HttpStatuses.BAD_REQUEST)
                    .send(buildErrorResponse(error, builderArguments, options));
            }
            return next(error);
        }
    };
}
exports.buildValidationMiddleware = buildValidationMiddleware;
//# sourceMappingURL=validation.middleware.js.map