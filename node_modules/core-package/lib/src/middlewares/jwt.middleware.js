"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jwtMiddleware = void 0;
const buildAuthObject_1 = require("../utils/buildAuthObject");
const buildError_1 = require("../buildError");
const httpStatuses_1 = require("../httpStatuses");
const checkAndReturnAuthHeader = (header) => {
    if (!(header === null || header === void 0 ? void 0 : header.startsWith('Bearer'))) {
        throw buildError_1.buildError({
            message: 'Missing JWT token.',
            publicMessage: 'Missing JWT token.',
            code: 'jwt-missing',
            statusCode: httpStatuses_1.HttpStatuses.UNAUTHORIZED,
        });
    }
    return header;
};
const checkAdminRequirement = (options, authObject) => {
    if ((options === null || options === void 0 ? void 0 : options.requiresAdmin) && !authObject.admin) {
        throw buildError_1.buildError({
            message: 'Attempt to log as an admin',
            publicMessage: 'Unauthorized',
            statusCode: httpStatuses_1.HttpStatuses.UNAUTHORIZED,
        });
    }
};
exports.jwtMiddleware = (options) => (req, res, next) => {
    if ((options === null || options === void 0 ? void 0 : options.isOptional) && !req.headers.authorization) {
        return next();
    }
    const authHeader = checkAndReturnAuthHeader(req.headers.authorization);
    const authObject = buildAuthObject_1.buildAuthObject(authHeader);
    checkAdminRequirement(options, authObject);
    req.jwt = authObject;
    return next();
};
//# sourceMappingURL=jwt.middleware.js.map