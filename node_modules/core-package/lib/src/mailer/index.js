"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mailer = exports.MonitoringCategories = void 0;
const node_mailjet_1 = __importDefault(require("node-mailjet"));
const config_1 = require("./config");
const payload_1 = require("./payload");
function checkResponse(response) {
    return response.body.Messages.every(message => message.Status === 'success');
}
var MonitoringCategories;
(function (MonitoringCategories) {
    MonitoringCategories["SHARE_VIDEO"] = "share_a_video_to_a_friend";
    MonitoringCategories["UPDATE_EMAIL_CONFIRMATION"] = "email_validation_next";
    MonitoringCategories["UPDATE_EMAIL_WARNING"] = "email_validation_alert";
    MonitoringCategories["UPDATE_EMAIL_VALIDATION"] = "email_validation";
    MonitoringCategories["UPDATE_EMAIL_VALIDATION_ASK"] = "email_validation_ask";
    MonitoringCategories["FORGOT_USERNAME"] = "username_forget";
    MonitoringCategories["PASSWORD_VALIDATION"] = "password_validation";
})(MonitoringCategories = exports.MonitoringCategories || (exports.MonitoringCategories = {}));
const buildClient = ({ PUBLIC_KEY, PRIVATE_KEY, TIMEOUT, }) => node_mailjet_1.default.connect(PUBLIC_KEY, PRIVATE_KEY, { timeout: TIMEOUT });
exports.mailer = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const config = config_1.buildConfig();
    const response = yield buildClient(config)
        .post('send', { version: config.API_VERSION })
        .request(payload_1.buildRequestPayload(options, config));
    return checkResponse(response);
});
//# sourceMappingURL=index.js.map