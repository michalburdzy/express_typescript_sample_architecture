"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const buildAuthObject_1 = require("../../src/utils/buildAuthObject");
const httpStatuses_1 = require("../../src/httpStatuses");
const exampleJWT = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMzQ1Njc4OTAsInVzZXJuYW1lIjoiSm9obiBEb2UiLCJhdmF0YXIiOiJ3d3cuc29tZS5hdmF0YXIuY29tIiwic3Vic2NyaXB0aW9uIjp0cnVlLCJhZG1pbiI6ZmFsc2V9.8lX9ZeiIP_PbAuhb8h-xE8eJfK-dmcKAXRBrqh0ePbU';
const exampleJWTAdmin = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMzQ1Njc4OTAsInVzZXJuYW1lIjoiSm9obiBEb2UiLCJhdmF0YXIiOiJ3d3cuc29tZS5hdmF0YXIuY29tIiwic3Vic2NyaXB0aW9uIjp0cnVlLCJhZG1pbiI6dHJ1ZX0.bUZlRLlNGGSi5dTmBzlnUHuLO9D3eYxQJTNwdt_eR0A';
const jwtWithoutAdminAndSubscription = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMzQ1Njc4OTAsInVzZXJuYW1lIjoiSm9obiBEb2UiLCJhdmF0YXIiOiJ3d3cuc29tZS5hdmF0YXIuY29tIn0.spgnaOryMOGYT5UBl1jkERZb_7npJvHyhh3dUs2hSl8';
describe('buildAuthObject', () => {
    it('should return object with IAuthObject interface', () => {
        expect(buildAuthObject_1.buildAuthObject(exampleJWT)).toEqual({
            userId: 1234567890,
            username: 'John Doe',
            avatar: 'www.some.avatar.com',
            subscription: true,
            admin: false,
        });
    });
    it('should return object with IAuthObject interface for Admin', () => {
        expect(buildAuthObject_1.buildAuthObject(exampleJWTAdmin)).toEqual({
            userId: 1234567890,
            username: 'John Doe',
            avatar: 'www.some.avatar.com',
            subscription: true,
            admin: true,
        });
    });
    it('should return object with IAuthObject interface Admin and subscription and admin that are set to false', () => {
        expect(buildAuthObject_1.buildAuthObject(jwtWithoutAdminAndSubscription)).toEqual({
            userId: 1234567890,
            username: 'John Doe',
            avatar: 'www.some.avatar.com',
            subscription: false,
            admin: false,
        });
    });
    it('should throw an error', () => {
        expect.assertions(4);
        try {
            buildAuthObject_1.buildAuthObject('invalidtoken');
        }
        catch (error) {
            expect(error.message).toBe('Invalid JWT token format.');
            expect(error.publicMessage).toBe('Invalid JWT token format.');
            expect(error.code).toBe('invalid-jwt-format');
            expect(error.statusCode).toBe(httpStatuses_1.HttpStatuses.UNAUTHORIZED);
        }
    });
});
//# sourceMappingURL=buildAuthObject.test.js.map