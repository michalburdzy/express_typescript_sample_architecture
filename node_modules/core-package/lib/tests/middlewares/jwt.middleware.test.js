"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const supertest_1 = __importDefault(require("supertest"));
const express_1 = __importDefault(require("express"));
const jwt_middleware_1 = require("../../src/middlewares/jwt.middleware");
const src_1 = require("../../src");
const exampleJWT = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMzQ1Njc4OTAsInVzZXJuYW1lIjoiSm9obiBEb2UiLCJhdmF0YXIiOiJ3d3cuc29tZS5hdmF0YXIuY29tIiwic3Vic2NyaXB0aW9uIjp0cnVlLCJhZG1pbiI6ZmFsc2V9.8lX9ZeiIP_PbAuhb8h-xE8eJfK-dmcKAXRBrqh0ePbU';
const exampleJWTAdmin = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEyMzQ1Njc4OTAsInVzZXJuYW1lIjoiSm9obiBEb2UiLCJhdmF0YXIiOiJ3d3cuc29tZS5hdmF0YXIuY29tIiwic3Vic2NyaXB0aW9uIjp0cnVlLCJhZG1pbiI6dHJ1ZX0.bUZlRLlNGGSi5dTmBzlnUHuLO9D3eYxQJTNwdt_eR0A';
describe('jwtMiddleware', () => {
    test('validates user', () => __awaiter(void 0, void 0, void 0, function* () {
        const middleware = jwt_middleware_1.jwtMiddleware();
        const app = express_1.default().get('/', middleware, (request, response) => response.sendStatus(201));
        const { status } = yield supertest_1.default(app)
            .get('/')
            .set('Authorization', exampleJWT);
        expect(status).toEqual(201);
    }));
    test('refuse access for wrong token', () => __awaiter(void 0, void 0, void 0, function* () {
        const middleware = jwt_middleware_1.jwtMiddleware();
        const app = express_1.default().get('/', middleware, (request, response) => response.sendStatus(201), src_1.appErrorHandlerMiddleware);
        const { status, body } = yield supertest_1.default(app)
            .get('/')
            .set('Authorization', 'eoeoeo');
        expect(status).toEqual(401);
        expect(body).toEqual({
            code: 'jwt-missing',
            message: 'Missing JWT token.',
            statusCode: 401,
        });
    }));
    describe('isOptional', () => {
        test('pass empty jwt', () => __awaiter(void 0, void 0, void 0, function* () {
            const middleware = jwt_middleware_1.jwtMiddleware({ isOptional: true });
            const app = express_1.default().get('/', middleware, (request, response) => {
                return response.status(201).send({ token: request.jwt });
            }, src_1.appErrorHandlerMiddleware);
            const { status, body } = yield supertest_1.default(app).get('/');
            expect(status).toEqual(201);
            expect(body.token).toBeUndefined();
        }));
        test('pass jwt', () => __awaiter(void 0, void 0, void 0, function* () {
            const middleware = jwt_middleware_1.jwtMiddleware({ isOptional: true });
            const app = express_1.default().get('/', middleware, (request, response) => {
                return response.status(201).send({ token: request.jwt });
            }, src_1.appErrorHandlerMiddleware);
            const { status, body } = yield supertest_1.default(app)
                .get('/')
                .set('Authorization', exampleJWT);
            expect(status).toEqual(201);
            expect(body).toEqual({
                token: {
                    admin: false,
                    avatar: 'www.some.avatar.com',
                    subscription: true,
                    userId: 1234567890,
                    username: 'John Doe',
                },
            });
        }));
    });
    describe('requiresAdmin', () => {
        test('validates admin', () => __awaiter(void 0, void 0, void 0, function* () {
            const middleware = jwt_middleware_1.jwtMiddleware({
                requiresAdmin: true,
            });
            const app = express_1.default().get('/', middleware, (request, response) => response.sendStatus(201));
            const { status } = yield supertest_1.default(app)
                .get('/')
                .set('Authorization', exampleJWTAdmin);
            expect(status).toEqual(201);
        }));
        test('throws unauthorized error if user is not an admin', () => __awaiter(void 0, void 0, void 0, function* () {
            const middleware = jwt_middleware_1.jwtMiddleware({
                requiresAdmin: true,
            });
            const app = express_1.default().get('/', middleware, (request, response) => response.sendStatus(201), src_1.appErrorHandlerMiddleware);
            const { body, status } = yield supertest_1.default(app)
                .get('/')
                .set('Authorization', exampleJWT);
            expect(status).toEqual(401);
            expect(body).toEqual({ message: 'Unauthorized', statusCode: 401 });
        }));
    });
});
//# sourceMappingURL=jwt.middleware.test.js.map