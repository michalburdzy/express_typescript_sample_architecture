"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mocked_env_1 = __importDefault(require("mocked-env"));
const configBuilder_1 = require("../src/configBuilder");
describe('configBuilder', () => {
    let restore;
    afterAll(() => restore);
    test('fails if a required variable is not defined in process.env', () => {
        restore = mocked_env_1.default({ BAR: '123' });
        const subject = configBuilder_1.configBuilder({
            requiredVariables: ['FOO'],
            parseFunction: () => ({ foo: 'abc', bar: 123 }),
        });
        expect(subject).toThrow('FOO env variable is required');
    });
    test('parse data according to parseFunction', () => {
        restore = mocked_env_1.default({ FOO: 'aezakmi', BAR: '123' });
        const subject = configBuilder_1.configBuilder({
            requiredVariables: ['FOO', 'BAR'],
            parseFunction: config => ({
                foo: config.FOO,
                bar: parseInt(config.BAR, 10),
            }),
        });
        const config = subject();
        expect(config).toEqual({
            foo: 'aezakmi',
            bar: 123,
        });
    });
});
//# sourceMappingURL=configBuilder.test.js.map