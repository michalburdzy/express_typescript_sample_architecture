"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const requester_1 = require("../src/requester");
const axios_1 = __importDefault(require("axios"));
jest.mock('axios', () => ({
    __esModule: true,
    default: jest.fn().mockResolvedValue({ data: 'axios response' }),
}));
describe('requester', () => {
    it('calls axios', () => __awaiter(void 0, void 0, void 0, function* () {
        const options = {
            url: 'A',
            method: requester_1.RequesterMethods.DELETE,
            data: 'A',
            headers: 'A',
            params: 'A',
            timeout: 1000,
        };
        const result = yield requester_1.requester(options);
        expect(axios_1.default).toBeCalledWith(options);
        expect(result).toEqual('axios response');
    }));
});
//# sourceMappingURL=requester.test.js.map