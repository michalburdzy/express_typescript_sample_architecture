"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_mailjet_1 = __importDefault(require("node-mailjet"));
const mocked_env_1 = __importDefault(require("mocked-env"));
const mailer_1 = require("../../src/mailer");
jest.mock('node-mailjet', jest.fn().mockReturnValue({
    connect: jest.fn().mockReturnValue({
        post: jest.fn().mockReturnValue({
            request: jest.fn().mockResolvedValue({
                body: { Messages: [{ Status: 'success' }] },
            }),
        }),
    }),
}));
describe('mailer', () => {
    let restore;
    beforeAll(() => (restore = mocked_env_1.default({
        MAILJET_ACCOUNT_EMAIL: 'ACC EMAIL',
        MAILJET_API_PRIVATE_KEY: 'PRIV',
        MAILJET_API_PUBLIC_KEY: 'PUB',
    })));
    afterAll(() => restore);
    it('sends proper request and responds with true if all statuses are success', () => __awaiter(void 0, void 0, void 0, function* () {
        const result = yield mailer_1.mailer({
            html: 'HTML',
            subject: 'SUBJECT',
            to: 'TO',
            customId: 'CUSTOM ID',
            monitoringCategory: mailer_1.MonitoringCategories.SHARE_VIDEO,
        });
        expect(node_mailjet_1.default.connect).toBeCalledWith('PUB', 'PRIV', { timeout: 10000 });
        expect(result).toEqual(true);
    }));
});
//# sourceMappingURL=mailer.test.js.map